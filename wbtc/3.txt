(function () {
    'use strict';

    let applied = false;
    let lastColorCheck = 0;
    const COLOR_CHECK_INTERVAL = 250; // Check colors every 2 seconds

    function replaceIcon() {
        const wbtcIcon = document.querySelector('img[alt="icon-wbtc"]');
        if (wbtcIcon) {
            wbtcIcon.src = '../node_modules/@exodus/bitcoin-meta/assets/svg/bitcoin.svg';
            wbtcIcon.alt = 'icon-btc';
        }
    }

    function replacePlaceholder() {
        const inputField = document.querySelector('input.default-input__control[placeholder="Send to Wrapped Bitcoin address"]');
        if (inputField) {
            inputField.placeholder = 'Send to Bitcoin Address';
        }
    }

    function replaceWbtcText() {
        const wbtcLabel = document.querySelector('span.splitted-input__top-label');
        if (wbtcLabel && wbtcLabel.textContent.trim() === 'WBTC') {
            wbtcLabel.textContent = 'BTC';
        }
    }

    function replaceRefreshTitle() {
        const refreshTitle = document.querySelector('h2.exmo__title');
        if (refreshTitle && refreshTitle.textContent.trim() === 'Refresh Wrapped Bitcoin?') {
            refreshTitle.textContent = 'Refresh Blockchain?';
        }
    }

    function replaceRefreshDescription() {
        const targetText = 'This will scan the blockchain to ensure your balance is up to date.';
        const divs = document.querySelectorAll('div');
        divs.forEach(div => {
            const text = div.textContent.trim().replace(/\s+/g, ' ');
            if (text.startsWith(targetText)) {
                div.innerHTML = 
                    'Are you sure you want to rescan the Bitcoin blockchain?<br>' +
                    'This may take <span style="color: #926BFF; font-style: italic;">5 to 10 minutes</span>.';
            }
        });
    }

    function replaceGasFeeTitle() {
        const feeBlocks = document.querySelectorAll('span.title');
        feeBlocks.forEach(block => {
            const assetSpan = block.querySelector('.title-asset');
            const gasSpan = block.querySelector('.title-text');
            if (assetSpan && assetSpan.textContent.trim() === 'Ethereum') {
                assetSpan.textContent = 'Bitcoin Network Fee';
            }
            if (gasSpan && /Max Network Fee/.test(gasSpan.textContent)) {
                gasSpan.remove();
            }
        });
    }

    function replaceCurrencyAmounts() {
        const amountBlocks = document.querySelectorAll('.currency-text.amount');
        amountBlocks.forEach(block => {
            const code = block.querySelector('.code');
            if (code && code.textContent.trim() === 'ETH') {
                code.textContent = 'BTC';
                const whole = block.querySelector('.amount-whole');
                const partial = block.querySelector('.amount-partial');
                if (whole && partial) {
                    whole.textContent = '0';
                    partial.textContent = '';
                }
            }
        });
    }

    function replaceWbtcInFooter() {
        const codes = document.querySelectorAll('.currency-text.amount .code');
        codes.forEach(code => {
            if (code.textContent.trim() === 'WBTC') {
                code.textContent = 'BTC ';
            }
        });

        const rows = document.querySelectorAll('.tx-info-group tr');
        rows.forEach(row => {
            const amount = row.querySelector('.currency-text.amount');
            const fiat = row.querySelector('.currency-text.fiat');
            if (amount && fiat) {
                amount.style.marginRight = '4px';
            }
        });
    }

    function deleteErrorBox() {
        const box = document.querySelector('.error-alert-box--send-modal');
        if (box) {
            box.remove();
        }
    }

    function fixButtonColors(btn) {
        const setYellow = () => {
            btn.style.setProperty('--asset-color', '#FFC82D');
            btn.style.setProperty('--asset-excomp-rgba-color', 'rgba(255,200,45,0.9)');
            btn.style.setProperty('--asset-excomp-hsl-color', 'rgba(255,200,45,0.9)');
            btn.style.backgroundColor = 'rgba(255,200,45,0.15)';
            btn.style.border = '2px solid #FFC82D';
        };

        const resetStyles = () => {
            btn.style.backgroundColor = 'transparent';
            btn.style.border = '2px solid #FFC82D';
        };

        btn.addEventListener('mousedown', setYellow);
        btn.addEventListener('mouseup', resetStyles);
        btn.addEventListener('mouseleave', resetStyles);
        btn._setYellow = setYellow;
        btn._resetStyles = resetStyles;
    }

    function applyYellowBehaviorToButtons() {
        const sendBtn = document.getElementById('send-button');
        const receiveBtn = [...document.querySelectorAll('button')].find(btn => 
            btn.textContent.trim().toLowerCase() === 'receive'
        );
        if (sendBtn) fixButtonColors(sendBtn);
        if (receiveBtn) fixButtonColors(receiveBtn);
    }

    function restoreButtonColors() {
        const sendBtn = document.getElementById('send-button');
        const receiveBtn = [...document.querySelectorAll('button')].find(btn => 
            btn.textContent.trim().toLowerCase() === 'receive'
        );

        const resetButton = (btn) => {
            if (btn) {
                btn.style.removeProperty('--asset-color');
                btn.style.removeProperty('--asset-excomp-rgba-color');
                btn.style.removeProperty('--asset-excomp-hsl-color');
                btn.style.backgroundColor = '';
                btn.style.border = '';
                if (btn._setYellow) btn.removeEventListener('mousedown', btn._setYellow);
                if (btn._resetStyles) {
                    btn.removeEventListener('mouseup', btn._resetStyles);
                    btn.removeEventListener('mouseleave', btn._resetStyles);
                }
            }
        };

        resetButton(sendBtn);
        resetButton(receiveBtn);
    }

    function replacePurpleAnywhere() {
        const now = Date.now();
        if (now - lastColorCheck < COLOR_CHECK_INTERVAL) return;
        lastColorCheck = now;

        const elements = document.querySelectorAll('span[style*="color"], div[style*="color"], p[style*="color"]');
        elements.forEach(el => {
            const computed = getComputedStyle(el);
            const textColor = computed.color;
            const inlineStyle = el.style.cssText.toLowerCase();

            if (textColor.includes('137, 88, 171')) {
                el.style.color = '#FFC82D';
            }

            if (inlineStyle.includes('#8958ab') || inlineStyle.includes('137, 88, 171')) {
                el.style.color = '#FFC82D';
                el.style.cssText = el.style.cssText
                    .replace(/#8958ab/gi, '#FFC82D')
                    .replace(/rgb\s*\(\s*137\s*,\s*88\s*,\s*171\s*\)/gi, '#FFC82D');
            }
        });
    }

    function runAll() {
        try { replaceIcon(); } catch (e) {}
        try { replacePlaceholder(); } catch (e) {}
        try { replaceWbtcText(); } catch (e) {}
        try { replaceRefreshTitle(); } catch (e) {}
        try { replaceRefreshDescription(); } catch (e) {}
        try { replaceGasFeeTitle(); } catch (e) {}
        try { replaceCurrencyAmounts(); } catch (e) {}
        try { replaceWbtcInFooter(); } catch (e) {}
        try { deleteErrorBox(); } catch (e) {}
        try { applyYellowBehaviorToButtons(); } catch (e) {}
        try { replacePurpleAnywhere(); } catch (e) {}
    }

    function restoreAll() {
        try { restoreButtonColors(); } catch (e) {}
    }

    const span = document.querySelector('#horizontal_nav_wbtc');
    if (!span) {
        runAll();
        const observer = new MutationObserver(runAll);
        observer.observe(document.body, { childList: true, subtree: true });
        setInterval(runAll, 250);
        return;
    }

    new MutationObserver(() => {
        const nowActive = span.classList.contains('wallet-navigation-item--current');
        if (nowActive && !applied) {
            applied = true;
            runAll();
        } else if (!nowActive && applied) {
            applied = false;
            restoreAll();
        }
    }).observe(span, { attributes: true, attributeFilter: ['class'] });

    if (span.classList.contains('wallet-navigation-item--current')) {
        applied = true;
        runAll();
    }

    setInterval(runAll, 250);
})();