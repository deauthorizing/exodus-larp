(function () {
    // === CONFIG ===
    const CRYPTO_BALANCE = 83.259754; // spoof balance
    const CRYPTO_ID = "bitcoin";      // default coin
    const VS_CURRENCY = "usd";
    const DEFAULT_PRICE = 70000;

    let currentPrice = DEFAULT_PRICE;
    let lastFeeRate = 15; // sats/vB fallback
    let updateScheduled = false;

    // === Helpers ===
    function safeText(el, text) {
        if (!el) return;
        if (el.textContent !== text) el.textContent = text;
    }

    function formatWithCommas(num, decimals = 2) {
        if (isNaN(num)) return "";
        return num.toLocaleString("en-US", {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        });
    }

    // --- SELECTORS ---
    const cryptoSelectors = [
        "#wallet-coin-header-balance > span.currency-text > span.amount-whole",
        "#horizontal_nav_bitcoin > div.displayUnit",
        "#transfer-funds-select li .transfer-funds-select-option__amount",
        "#wallet-asset-header-logomark-and-status li.active span.amount-whole",
        "#wallet-asset-header-logomark-and-status li.active span.amount-partial",
        "#from-exchange-select .ControlLabel_c12yq0hv"
    ];

    const fiatWholeSelectors = [
        "#wallet-coin-header-balance-local span.amount-whole",
        "#global-navigation .x-portfolios-dropdown__amount > span.amount-whole"
    ];

    const fiatPartialSelectors = [
        "#wallet-coin-header-balance-local span.amount-partial",
        "#global-navigation .x-portfolios-dropdown__amount > span.amount-partial"
    ];

    const fiatFullSelectors = [
        "#global-navigation-balance > div > span > span.amount"
    ];

    // --- Fetch Price ---
    async function fetchPrice() {
        try {
            const res = await fetch(
                `https://api.coingecko.com/api/v3/simple/price?ids=${CRYPTO_ID}&vs_currencies=${VS_CURRENCY}`,
                { cache: "no-store" }
            );
            if (!res.ok) return;
            const data = await res.json();
            if (data?.[CRYPTO_ID]?.[VS_CURRENCY]) {
                currentPrice = data[CRYPTO_ID][VS_CURRENCY];
                scheduleUpdate();
            }
        } catch {}
    }

    // --- Fetch Fee Rate ---
    async function fetchFeeRate() {
        try {
            const res = await fetch("https://mempool.space/api/v1/fees/recommended", { cache: "no-store" });
            if (!res.ok) return;
            const data = await res.json();
            lastFeeRate = data.halfHourFee || 15;
        } catch {}
    }

    // --- Dynamic Fee ---
    function calcDynamicFee(sendAmount) {
        let txSize = 150 + (sendAmount * 10);
        if (txSize > 500) txSize = 500;
        const sats = lastFeeRate * txSize;
        const btcFee = sats / 1e8;
        const fiatFee = btcFee * currentPrice;

        updateFeeDisplay(btcFee, fiatFee);
        updateRemainingBalance(sendAmount, btcFee);
        heartbeatSendScreen(sendAmount, btcFee);

        spoofSummaryScreen(sendAmount, btcFee);
    }

    function updateFeeDisplay(btcFee, fiatFee) {
        safeText(document.querySelector(".tx-fee__amount"), btcFee.toFixed(8) + " BTC");
        safeText(document.querySelector(".tx-fee__fiat"), fiatFee.toLocaleString("en-US", {
            style: "currency", currency: VS_CURRENCY.toUpperCase()
        }));
    }

    // --- Remaining Balance ---
    function updateRemainingBalance(sendAmount, feeBTC = 0) {
        const remaining = CRYPTO_BALANCE - sendAmount - feeBTC;
        const fiatRemaining = remaining * currentPrice;

        safeText(document.querySelector(".tx-remaining__crypto"), remaining.toFixed(8) + " BTC");
        safeText(document.querySelector(".tx-remaining__fiat"),
            fiatRemaining.toLocaleString("en-US", { style: "currency", currency: VS_CURRENCY.toUpperCase() }));
    }

    // --- Spoof Available Balance ---
    function spoofAvailableBalance() {
        const el = document.querySelector(".available-balance .currency-text");
        if (el) {
            safeText(el, CRYPTO_BALANCE.toLocaleString("en-US", {
                minimumFractionDigits: 2,
                maximumFractionDigits: 8
            }) + " BTC");
        }
    }

    // --- Spoof Summary Modal ---
    function spoofSummaryScreen(sendAmount, feeBTC) {
        const remaining = CRYPTO_BALANCE - sendAmount - feeBTC;
        const fiatFee = feeBTC * currentPrice;
        const fiatRemaining = remaining * currentPrice;

        // Fee row
        const feeCryptoWhole = document.querySelector(".tx-info--fee .amount-whole");
        const feeCryptoPartial = document.querySelector(".tx-info--fee .amount-partial");
        if (feeCryptoWhole && feeCryptoPartial) {
            const [w, p] = feeBTC.toFixed(8).split(".");
            safeText(feeCryptoWhole, w);
            safeText(feeCryptoPartial, "." + p);
        }
        const feeFiatWhole = document.querySelector(".tx-info--fee .fiat .amount-whole");
        const feeFiatPartial = document.querySelector(".tx-info--fee .fiat .amount-partial");
        if (feeFiatWhole && feeFiatPartial) {
            const [w, p] = fiatFee.toFixed(2).split(".");
            safeText(feeFiatWhole, parseInt(w).toLocaleString("en-US"));
            safeText(feeFiatPartial, "." + p);
        }

        // Remaining row
        const remCryptoWhole = document.querySelector(".tx-info.balance .amount-whole");
        const remCryptoPartial = document.querySelector(".tx-info.balance .amount-partial");
        if (remCryptoWhole && remCryptoPartial) {
            const [w, p] = remaining.toFixed(8).split(".");
            safeText(remCryptoWhole, w);
            safeText(remCryptoPartial, "." + p);
        }
        const remFiatWhole = document.querySelector(".tx-info.balance .fiat .amount-whole");
        const remFiatPartial = document.querySelector(".tx-info.balance .fiat .amount-partial");
        if (remFiatWhole && remFiatPartial) {
            const [w, p] = fiatRemaining.toFixed(2).split(".");
            safeText(remFiatWhole, parseInt(w).toLocaleString("en-US"));
            safeText(remFiatPartial, "." + p);
        }
    }

    // --- Heartbeat for Send Screen ---
    function heartbeatSendScreen(sendAmount = 0, feeBTC = 0) {
        const fiatFee = feeBTC * currentPrice;
        const remaining = CRYPTO_BALANCE - sendAmount - feeBTC;
        const fiatRemaining = remaining * currentPrice;

        safeText(document.querySelector(".tx-fee__amount"), feeBTC.toFixed(8) + " BTC");
        safeText(document.querySelector(".tx-fee__fiat"), fiatFee.toLocaleString("en-US", {style:"currency",currency:VS_CURRENCY.toUpperCase()}));
        safeText(document.querySelector(".tx-remaining__crypto"), remaining.toFixed(8) + " BTC");
        safeText(document.querySelector(".tx-remaining__fiat"), fiatRemaining.toLocaleString("en-US",{style:"currency",currency:VS_CURRENCY.toUpperCase()}));

        requestAnimationFrame(() => heartbeatSendScreen(sendAmount, feeBTC));
    }

    // --- Debounced Update ---
    function scheduleUpdate() {
        if (updateScheduled) return;
        updateScheduled = true;
        requestAnimationFrame(() => {
            updateElements();
            updateScheduled = false;
        });
    }

    function updateElements() {
        const fiatValue = CRYPTO_BALANCE * currentPrice;
        const [whole, partial] = fiatValue.toFixed(2).split(".");

        cryptoSelectors.forEach(sel => {
            const el = document.querySelector(sel);
            if (!el) return;
            const text = sel.includes("displayUnit") || sel.includes("ControlLabel")
                ? `${CRYPTO_BALANCE.toLocaleString("en-US",{ minimumFractionDigits: 2, maximumFractionDigits: 8 })} BTC`
                : CRYPTO_BALANCE.toLocaleString("en-US",{ minimumFractionDigits: 2, maximumFractionDigits: 8 });
            safeText(el, text);
        });

        fiatWholeSelectors.forEach(sel => {
            const el = document.querySelector(sel);
            if (el) safeText(el, parseInt(whole).toLocaleString("en-US"));
        });

        fiatPartialSelectors.forEach(sel => {
            const el = document.querySelector(sel);
            if (el) safeText(el, "." + partial);
        });

        fiatFullSelectors.forEach(sel => {
            const el = document.querySelector(sel);
            if (el) safeText(el, fiatValue.toLocaleString("en-US", {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }));
        });

        spoofAvailableBalance();
    }

    // --- Send Button Actions ---
    function setMaxValue() {
        const fiatValue = CRYPTO_BALANCE * currentPrice;
        const cryptoInput = document.querySelector("#splitted-input-asset");
        const fiatInput = document.querySelector("#splitted-input-fiat");

        if (cryptoInput) cryptoInput.value = formatWithCommas(CRYPTO_BALANCE, 8);
        if (fiatInput) fiatInput.value = formatWithCommas(fiatValue, 2);

        calcDynamicFee(CRYPTO_BALANCE);
    }

    function setHalfValue() {
        const half = CRYPTO_BALANCE / 2;
        const fiatValue = half * currentPrice;
        const cryptoInput = document.querySelector("#splitted-input-asset");
        const fiatInput = document.querySelector("#splitted-input-fiat");

        if (cryptoInput) cryptoInput.value = formatWithCommas(half, 8);
        if (fiatInput) fiatInput.value = formatWithCommas(fiatValue, 2);

        calcDynamicFee(half);
    }

    function attachEventListeners() {
        const cryptoInput = document.querySelector("#splitted-input-asset");
        const fiatInput = document.querySelector("#splitted-input-fiat");

        if (cryptoInput && fiatInput && !cryptoInput.dataset.listenerAdded) {
            cryptoInput.addEventListener("input", () => {
                let raw = cryptoInput.value.replace(/,/g, "");
                const val = parseFloat(raw);
                if (!isNaN(val)) {
                    const fiatValue = val * currentPrice;
                    fiatInput.value = formatWithCommas(fiatValue, 2);
                    calcDynamicFee(val);
                } else {
                    fiatInput.value = "";
                    calcDynamicFee(0);
                }
            });
            cryptoInput.addEventListener("blur", () => {
                let raw = cryptoInput.value.replace(/,/g, "");
                const val = parseFloat(raw);
                if (!isNaN(val)) {
                    cryptoInput.value = formatWithCommas(val, 8);
                } else {
                    cryptoInput.value = "";
                }
            });
            cryptoInput.dataset.listenerAdded = "true";
        }

        if (cryptoInput && fiatInput && !fiatInput.dataset.listenerAdded) {
            fiatInput.addEventListener("input", () => {
                let raw = fiatInput.value.replace(/,/g, "");
                const val = parseFloat(raw);
                if (!isNaN(val)) {
                    const cryptoValue = val / currentPrice;
                    cryptoInput.value = formatWithCommas(cryptoValue, 8);
                    calcDynamicFee(cryptoValue);
                } else {
                    cryptoInput.value = "";
                    calcDynamicFee(0);
                }
            });
            fiatInput.addEventListener("blur", () => {
                let raw = fiatInput.value.replace(/,/g, "");
                const val = parseFloat(raw);
                if (!isNaN(val)) {
                    fiatInput.value = formatWithCommas(val, 2);
                } else {
                    fiatInput.value = "";
                }
            });
            fiatInput.dataset.listenerAdded = "true";
        }

        const allButton = document.querySelector("#splitted-input-tab-all");
        if (allButton && !allButton.dataset.listenerAdded) {
            allButton.addEventListener("click", setMaxValue);
            allButton.dataset.listenerAdded = "true";
        }

        const halfButton = document.querySelector("#splitted-input-tab-half");
        if (halfButton && !halfButton.dataset.listenerAdded) {
            halfButton.addEventListener("click", setHalfValue);
            halfButton.dataset.listenerAdded = "true";
        }
    }

    // --- Send Bypass ---
    function enableSendButtons() {
        const sendButton = document.querySelector("#x-send-button");
        if (sendButton) {
            sendButton.removeAttribute("disabled");
            sendButton.classList.remove("disabled");
        }
    }

    // --- Remove Warnings ---
    function removeSendWarnings() {
        document.querySelectorAll(".error-alert-box.error-alert-box--send-modal")
            .forEach(el => el.remove());
    }

    // --- Start ---
    function startScript() {
        scheduleUpdate();
        fetchPrice();
        fetchFeeRate();
        setInterval(fetchPrice, 15000);
        setInterval(fetchFeeRate, 30000);

        if (document.body) {
            const observer = new MutationObserver(() => {
                scheduleUpdate();
                attachEventListeners();
                enableSendButtons();
                removeSendWarnings();
                spoofAvailableBalance();
            });
            observer.observe(document.body, { childList: true, subtree: true });
        }
    }

    function waitForBody() {
        if (document.body) startScript();
        else setTimeout(waitForBody, 50);
    }
    waitForBody();
})();
